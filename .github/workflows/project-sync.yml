name: Project Sync (RICE + ProjectV2)
on:
  issues:
    types: [opened, edited, labeled]
  issue_comment:
    types: [created]
jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: read
      actions: read
      repository-projects: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const projectNumber = parseInt(process.env.PROJECT_NUMBER || '1', 10);
            // Fetch project by number
            const projectQuery = `
              query($owner:String!, $number:Int!) {
                repository(owner:$owner, name:"${repo}") {
                  projectsV2(number:$number) { id }
                }
              }`;
            const projectData = await github.graphql(projectQuery, { owner, number: projectNumber });
            const projectId = projectData.repository?.projectsV2?.id;
            if (!projectId) {
              core.setFailed('Project not found. Set PROJECT_NUMBER repository variable to your project number.');
              return;
            }
            // Add issue to project if not present
            const nodeId = context.payload.issue?.node_id;
            if (!nodeId) return;
            await github.graphql(`
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                  item { id }
                }
              }`, { projectId, contentId: nodeId }).catch(()=>{});
            // Example: compute RICE from issue body markers (fallbacks if not present)
            const body = context.payload.issue.body || '';
            function extract(tag, def){
              const m = body.match(new RegExp(`\n${tag}:\s*(.+)`,'i'));
              return m ? parseFloat(m[1]) : def;
            }
            const reach = extract('Reach', 100);
            const impact = extract('Impact', 1);
            const confidence = extract('Confidence', 0.8);
            const effort = extract('Effort', 2);
            const rice = (reach * impact * confidence) / Math.max(effort, 0.5);
            core.info(`RICE=${rice}`);
            // Get field ids
            const fieldsQ = `
              query($projectId:ID!){
                node(id:$projectId){ ... on ProjectV2 {
                  fields(first:50){ nodes { id, name, dataType } }
                }}
              }`;
            const fields = await github.graphql(fieldsQ, { projectId });
            const nodes = fields.node.fields.nodes;
            function fId(name){ return nodes.find(n=>n.name===name)?.id; }
            const reachId = fId('Reach');
            const impactId = fId('Impact');
            const confidenceId = fId('Confidence');
            const effortId = fId('Effort');
            const riceId = fId('RICE');
            // Get the item id we just added
            const itemsQ = `
              query($projectId:ID!, $contentId:ID!){
                node(id:$projectId){ ... on ProjectV2 {
                  items(first:50, query: ""){ nodes { id, content { ... on Issue { node_id } } } }
                }}
              }`;
            const items = await github.graphql(itemsQ, { projectId, contentId: nodeId });
            const item = items.node.items.nodes.find(n=>n.content?.node_id===nodeId);
            if (!item) return;
            const itemId = item.id;
            // Helper to set number field
            async function setNumber(fieldId, value){
              if (!fieldId) return;
              await github.graphql(`
                mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $value:Float!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId,
                    itemId:$itemId,
                    fieldId:$fieldId,
                    value:{ number: $value }
                  }){ projectV2Item { id } }
                }`, { projectId, itemId, fieldId, value });
            }
            await setNumber(reachId, reach);
            await setNumber(impactId, impact);
            await setNumber(confidenceId, confidence);
            await setNumber(effortId, effort);
            await setNumber(riceId, rice);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
